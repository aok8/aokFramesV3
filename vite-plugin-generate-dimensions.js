import fs from 'node:fs/promises';
import path from 'node:path';
import imageSize from 'image-size';

const portfolioDir = path.resolve('src/images/Portfolio');
const outputFile = path.resolve('src/lib/data/portfolio-dimensions.ts');
const outputDir = path.dirname(outputFile);

async function generateDimensionsFile() {
  console.log('[vite-plugin] Generating portfolio image dimensions TypeScript file...');
  const dimensionsMap = {};

  try {
    const files = await fs.readdir(portfolioDir);
    for (const file of files) {
      const ext = path.extname(file).toLowerCase();
      if (!['.jpg', '.jpeg', '.png', '.webp'].includes(ext)) continue;

      const filePath = path.join(portfolioDir, file);
      try {
        const buffer = await fs.readFile(filePath);
        const dimensions = imageSize(buffer);
        if (dimensions.width && dimensions.height) {
          dimensionsMap[file] = { width: dimensions.width, height: dimensions.height };
        } else {
          console.warn(`[vite-plugin] Could not get dimensions for ${file}`);
        }
      } catch (err) {
        console.error(`[vite-plugin] Error processing file ${file}:`, err.message);
      }
    }

    await fs.mkdir(outputDir, { recursive: true });

    let tsContent = '// Generated by vite-plugin-generate-dimensions.js\n';
    tsContent += 'export const dimensionsMap = {';
    const entries = Object.entries(dimensionsMap);
    for (let i = 0; i < entries.length; i++) {
        const [filename, dims] = entries[i];
        const escapedFilename = JSON.stringify(filename);
        tsContent += `\n  ${escapedFilename}: { width: ${dims.width}, height: ${dims.height} }`;
        if (i < entries.length - 1) tsContent += ',';
    }
    tsContent += '\n} as const;\n';
    tsContent += '\nexport type PortfolioImageFilename = keyof typeof dimensionsMap;\n';

    await fs.writeFile(outputFile, tsContent);
    console.log(`[vite-plugin] Successfully wrote dimensions map to ${outputFile}`);

  } catch (error) {
    console.error('[vite-plugin] Error generating image dimensions:', error);
    // Optionally re-throw or handle error appropriately for Vite
    throw error;
  }
}

export default function generatePortfolioDimensionsPlugin() {
  return {
    name: 'generate-portfolio-dimensions', // required plugin name
    // Use buildStart hook which runs before module loading
    async buildStart() {
      await generateDimensionsFile();
    }
  };
} 