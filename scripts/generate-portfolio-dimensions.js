import fs from 'node:fs/promises';
import path from 'node:path';
import imageSize from 'image-size';

const portfolioDir = path.resolve('src/images/Portfolio');
const outputFile = path.resolve('src/lib/data/portfolio-dimensions.ts');
const outputDir = path.dirname(outputFile);

async function generateDimensions() {
  console.log('Generating portfolio image dimensions TypeScript file...');
  const dimensionsMap = {};

  try {
    const files = await fs.readdir(portfolioDir);

    for (const file of files) {
      const ext = path.extname(file).toLowerCase();
      if (!['.jpg', '.jpeg', '.png', '.webp'].includes(ext)) {
        continue; // Skip non-image files
      }

      const filePath = path.join(portfolioDir, file);
      try {
        const buffer = await fs.readFile(filePath);
        const dimensions = imageSize(buffer);
        if (dimensions.width && dimensions.height) {
          dimensionsMap[file] = { width: dimensions.width, height: dimensions.height };
           console.log(`  Processed ${file}: ${dimensions.width}x${dimensions.height}`);
        } else {
           console.warn(`  Could not get dimensions for ${file}`);
        }
      } catch (err) {
        console.error(`  Error processing file ${file}:`, err.message);
      }
    }

    // Ensure output directory exists
    await fs.mkdir(outputDir, { recursive: true });

    // Generate TypeScript file content
    let tsContent = '// Generated by scripts/generate-portfolio-dimensions.js\n';
    tsContent += '// Do not edit this file manually!\n\n';
    tsContent += 'export const dimensionsMap = {';
    
    const entries = Object.entries(dimensionsMap);
    for (let i = 0; i < entries.length; i++) {
        const [filename, dims] = entries[i];
        // Escape filename if necessary (e.g., contains quotes)
        const escapedFilename = JSON.stringify(filename);
        tsContent += `\n  ${escapedFilename}: { width: ${dims.width}, height: ${dims.height} }`;
        if (i < entries.length - 1) {
            tsContent += ',';
        }
    }
    
    tsContent += '\n} as const;\n'; // Add 'as const' for better type inference
    tsContent += '\nexport type PortfolioImageFilename = keyof typeof dimensionsMap;\n';

    // Write the TypeScript content to the file
    await fs.writeFile(outputFile, tsContent);

    console.log(`Successfully wrote dimensions map to ${outputFile}`);

  } catch (error) {
    console.error('Error generating image dimensions:', error);
    process.exit(1); // Exit with error code if generation fails
  }
}

generateDimensions(); 